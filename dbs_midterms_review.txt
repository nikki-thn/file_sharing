----==== SELECT STATEMENT ===----
SELECT -  to get some data, only require the select lists.
  append DISTINCT before column name to get unique entries for the column
  append ALL (by-default) to get all from a certain column, even duplicate values
WHERE: conditions to limit matches, think of it as a boolean expression (=, <> - not equal, >, <, !=, >=, <=). Popular operator uses are:
  + AND, OR, BETWEEN, 
  + LIKE - reg exp (ex, LIKE 'J%', '%N', 'N%N' , %O%'
  + IN - returns results that matches a list (ex, column1 IN (x, y, z)
  + IS - to check if a column is NULL (ex, column1 IS NULL, col2 IS NOT NULL)
ORDER BY: to order results in DESC or ACSC (by-default, no need to specify)
GROUP BY .... HAVING condition1: to group rows into certain group, example students from IPC in one group, OOP in another group

Syntax: for one table, a = alias
SELECT a.column1, a.column2 , ...
FROM table_name a
WHERE condition1 AND condition2 OR condition3 AND (condition1 BETWEEN x AND y), .....
ORDER BY a.column1, a.column2 DESC
GROUP BY column5 //note that column5 NEEDS to be in the select list

----==== SET FUNCTIONS ===----
Computational Functions: these are options for other statement (ie, SELECT
  + COUNT: only return non NULL 
  + MAX: return maximum value, NULL values are not counted
  + MIN: return minimum
  + AVG: only works on numeric columns
  + SUM: only works on numeric columns
  
Syntax: 
SELECT COUNT (*) FROM table //count number of rows in that table
SELECT COUNT (*) as meamingful_name FROM table t // for example, we can get total number of entries in a table by counting its rows
                                                 // notes that as meaningful_name is an alias for COUNT(*)
SELECT COUNT (DISTINCT column1) FROM table t // only count number of unique rows from that column1                                                
SELECT MAX(column1) FROM table //returns largest value from the column1
SELECT SUM(column2) FROM table 
SELECT SUM(DISTINCT column2) FROM table //only calculate sum on unique values of column1

SELECT COUNT(DISTINCT column5), column5 FROM table t GROUP BY column5 //this counts number of unique entries in column5
SELECT COUNT(t.column5), column5 FROM table t GROUP BY column5 //this counts number of every entries in group of column5
SELECT COUNT(t.column5) as count1, column5 FROM table GROUP BY column5 HAVING column5 = 'aString' // HAVING COUNT (a.column1) > 1
                                                                                                  // use alias HAVING count1 > 1
                                                                                 
----==== JOINS ===----

SELECT t.column1, t.column2, c.column1, c.column2 FROM table t, table c WHERE t.primarykey = c.primarykey

----==== INSERT ===----

INSERT: input data into a table (only one table at the time, but can be more than one rows into a table), must fill all NOT NULL columns, columns need to have correspondent values 

Syntax:

INSERT INTO table t (t.col1, t.col2, t.col3) VALUES (values1, values2, 'values3') //useful when we don't know the order of columns
INSERT INTO table t (t.col1, t.col2, t.col3) VALUES (values1, values2, 'values3'), (values, values2, 'values3) //multi=rows entries

INSERT INTO table t SELECT * FROM table1 c WHERE ... //this is to copy all rows from a table to another. Appending??

----==== UPDATE ===----

UPDATE table t SET t.col1 = 'value' WHERE t.col2 = 'string' //basically use to update a value on a row (not whole row) on ONE row
UPDATE table t set t.col1 = 'value' //without the WHERE clause, all rows will be update to new value at col1

----==== DELETE ===----

DELETE: delete one or more rows (or all rows) from ONE table at the time, permanently

DELETE FROM table t WHERE t.col1 > value //just like SELECT, but this case it deletes data, we can use same statement with SELECT to  ...                                          // ... confirm the data we want to delete before execute the DELETE statement

DELETE FROM table t // will delete every rows without the WHERE clause

Tips: use START TRANSACTION ... ROLLBACK / COMMMIT or SELECT to test DELETE statement before hitting Enter!!!

----==== CREATE TABLE ===----

Primary Key is implicitly NOT NULL, it's possible to have more than one primary key

CREATE TABLE table t (
  col1 INTERGER UNIQUE,
  col2 CHAR (20) NOT NULL,
  col3 NUMBER (3) NOT NULL WITH DEFAULT,
  CONSTRAINT table_PK PRIMARY KEY (t.col, t.col2),
  CONSTRAINT table_col1_FK FOREIGN KEY (t.col1) REFERENCES table c (c.col1) // make sure table c has established a PK on same col
                                                                            // attributes of t.col1 and c.col1 has to be same
                                                                            // ie. both CHAR (3) or DECIMAL (5), etc
 )
 
 CREATE TABLE table as (SELECT * FROM table c) with DATA
 
 CREATE VIEW view as (
  SELECT a.col1, a.col2, trim(a.col3) ||' '|| a.col4 as new_col_name,
         b.col1, b.col2, b.col3 * b.col4 as new_col1_name
  FROM table a, table1 b
  WHERE a.PK = b.PK
 
----==== ALTER TABLE ===---- 
 
ALTER TABLE table t
  ADD CONSTRAINT table1_col1_PK PRIMARY KEY
  
ALTER TABLE table t
  DROP CONSTRAINT table_col1_FK
  
ALTER TABLE table t
  ADD CONSTRAINT table_col1_CK CHECK (t.col1 IN (x, y, z)) // (t.col1 BETWEEN x AND y)
  
ALTER TABLE table t
  ADD CONSTRAINT table_col1_UN UNIQUE (t.col2)

ALTER TABLE table t
  DROP COLUMN t.col1
  
ALTER TABLE table t
  ADD t.col5 char(3)
  
----==== DROP TABLE ===----   
 
DROP TABLE table //delete table and all data stores in it

DROP SCHEMA schema

----==== GRANT / REVOKE ===----  

GRANT ... ON ... TO
REVOKE ... ON ... FROM

Privileges: ALL, SELECT, INDEX, REFERENCE, UPDATE, ALTER, DELETE
