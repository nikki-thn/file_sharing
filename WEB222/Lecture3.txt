-----=== Week 3: JavaScript Objects ===-----

  1. STRING OBJECT
  
  var stringObj = "enclosed in doble quotes", stringObj2 = 'or single quote within "double quote"';
  
    a. String proprties & methods operations: 
         
          var example = "STRING";
         
          + length: return string length
          Syntax: example.length; // return 6
          
          
          + charAt(indexNum): return a character at the specified index number
          Syntax: example.charAt(0); // return S
                  example.charAt(6); // return "" (note that index goes from 0, hence at index 6 there is nothing)
                  
                  
          + charCodeAt(indexNum): return unicode value (decimal) of a character at specified index
          Syntax: example.charCodeAt(0); // return 83 html value of letter S in unicode table
                  example.charCodeAt(1); // return 84 of letter T
                  
                  
          + concat(string1, string2): concatenate string2 to 1, ***recommend to use operator +, += than concat***
          syntax: var string0 = "I like";
                  var string1 = "sushi";
                  var string2 = "noodles.";
                  
                  string2 = string0.concat(string1, "&", string2); //return "I like sushi & noodles.";
                  
                  
          + indexOf(charOrString): return the position (or indexNum) of character(s) at FIRST occurence, search phase has to exit with in string
          syntax:   var course = "WEB222";
                    example.indexOf("W"); //return 0 
                    example.indexOf("EB2"); //return 1, only count 1st char
                    example.indexOf("2"); //return 2, it goes forward
                    example.indexOf("BA"); //return -1, although, it only counts 1st char, the string need to be valid ("BA" is not in course)
                    example.indexOf("b2"); //return -1, case-sensitive
         
         
          + lastIndexOf(charOrString): return the position (or indexNum) of character(s) at LAST occurence (of first character)
          syntax:   var example1 = "WEB222";
                    var example2 = "WEB2EB22";
                    example.lastIndexOf("W"); //return 0 
                    example.lastIndexOf("EB2"); //return 1, only count 1st char
                    example2.lastIndexOf("EB2"); //return 4, only count 1st char
                    example.lastIndexOf("2"); //return 5, it goes backward
                    example.lastIndexOf("22"); //return 4
                    example.lastIndexOf("b2"); //return -1, case-sensitive
          
          
          
          + split(charOrString): to break an string into array, use ' ' to specify character's position to break
          syntax:   var myString = "break string space delimiter";
                    var myArray1 = myString.split(' '); //nothing between ' ' means using space as delimiter, or we could use a keyword but 
                                                        //would break the string into 2 or else depends on the occurence of the keywords
                    
                    myArray1[0]; //contains "break"
                    myArray1[1]; //contains "string" and so on
                    
                              
          + substr(x, len): returns a sub string where x - start index, len - number of character
            syntax: var myString = "WEB222"; 
                    myString.substr(1, 4); // return "EB22"
                    myString.substr(4, 4); // return "22" since only 22 left
                    myString.substr(1); // return "EB222" from index 1 to end of string
                    myString.substr((myString.length-4),1) ); take string lenth -4 which is 2
                                    
                     
          + toUpperCase() / toLowerCase(): convert a string to uppercase, must call the function first before it's taking effective
          syntax: var myString = "Seneca";
                  myString = myString.toUpperCase(); //return SENECA
                  
                  
          + trim(): removes whitespace (blank space from left or right of the string   
          syntax: var myString = "      WEB 222          "; //string length is 14
                  myString = myString.trim(); // WEB 222, string length is 7
                  
                  
          + prototype: to add properties and methods to an object
          syntax: String ******don't know
          
          
  2. REGEXP OBJECT
      
      var patt = / pattern / [modifiers];
      
      To validate: at least 4 alphabetical alphabetic character
          ▪ var pattern1 = /^[a-zA-Z]{4,}$/;
      To validate: telephone format ###-###-####
          ▪ var pattern2 = /^([0-9]{3}[-]){2}[0-9]{4}$/;

      
      modifiers can be: g - global match
                        i - ignore case
                        m - multiline;
                        
           + test(str): to test if a string contains the (RegExp) pattern
            syntax: var str = "Welcome to Toronto";
            
            var patt = /Me/;
            var result = patt.test(str); // false
            var result2 = /Me/i.test(str); // true
            
            
            + match(RegExp): function uses to search for a match, it returns AN ARRAY  
            syntax: var str = "Welcome to Toronto";
                   var patt1 = /to/i;
                   var result = str.match(patt1);
                   console.log(result); // returns "to"
                   console.log(result[0]); // returns "to" as it is case-sensitive and only the first "to" (no global)
                   
                   var patt1 = /to/g; // do a global
                   console.log(result); // to, to (case-sensitive) so only 2 matches
                   
                   var patt1 = /to/i; //ignore case
                   console.log(result); // to, To, to from result[0] - result[2]
                   
                   
              + replace(RegExp, replacement): find regexp and replace
              syntax: var str = "Welcome to Toronto";
                      var patt = /to/i; // i: ignore case-sensitivity
                      var result = str.replace(patt, "<TO>");
                      console.log(result); // returns "Welcome <TO> Toronto"
                      console.log(str.replace(/to/g, "<TO>")); // g: global search
                      console.log(str.replace(/to/ig, "<TO>")); 
                      console.log(str); // returns "Welcome <TO> <TO>ron<TO>"
                      
                      
               + split(RegExp): break a string into substrings using delimiter
               syntax: var str = "School of ICT-Seneca College";
                       console.log(str.split('-')); // return an array [ "School of ICT", "Seneca College" ]
                       console.log(str.split(/-/)); // same as above
                       console.log(str.split(/[ -]/)); // space and "-" as delimiter [ "School", "of", "ICT", "Seneca", "College" ]


               + search(RegExp): search for a match and return index number
               syntax: var myString = "WEB222"
                       myString.search(/222/); // returns 3
                       myString.search(/B/); // returns 2
                       myString.search(/322/); // returns -1
                       
               +
               +
               +

   
    3. ARRAY OBJECT
    
       Loop through an array in JavaScript by using for loop:
       var i, len;
       var colors = ["Red", "Green", "Blue", "Yellow", "White"];
       
       for (i = 0, len = colors.length; i < len; i++) {
       console.log(i + ": " + colors[i]);
       }
    
                + length: returns number of elements 
                
                syntax: var arrayName1 = [11, 15, 13, "blue", 24, 35.05]
                        var arrayName2 = [];
                        var myAarray3 = new Array();
                        myAarray3 [2] = "Green";
                        console.log( myAarray1.length ); // return 0
                        console.log( myAarray2.length ); // return 6
                        console.log( myAarray3.length ); // return 3
                    
                    
                + pop() / shift(): : removes the last/first entry and display the removed element
                syntax: var str = ["School","of", "ICT"];
                        console.log(str.pop()); //return "ICT"
                        console.log(str); // array = [ "School", "of" ]
                     
                     
                + push(newEntry)/unshift(newEntry): adds a new entry to the end/beginning of the array
                syntax: var colors = ["Red", "Green", "Blue"];
                        colors.push("Pink");
                        console.log(colors); // [ "Red", "Green", "Blue", "Pink" ]


                + concat(): concat two or more arrays and returns a new array
                syntax: var array1 = ["Red", "Green", "Blue"];
                        var array2 = [1, 2, 3, "Yellow"];
                        
                        var newArray = array1.concat(array2);
                        console.log(newArray); // returns array ["Red", "Green", "Blue", 1, 2, 3, "Yellow"]
                        
                
                + join(): join all the elements of an array into a ONE string, seperated by a string seperator (default is ,)
                syntax: var myArray = ["Red", "Green", "Blue", "Yellow"];
                        
                        console.log( myArray.join() ); // "Red,Green,Blue,Yellow"
                        console.log( myArray.join(' ') ); // "Green Blue Yellow"
                        console.log( myArray.join("&") ); // "Red&Green&Blue&Yellow"
                   
                   
                + reverse(): reverse order of all elements in an array
                syntax: var myArray = ["Red", "Green", "Blue", "Yellow"];
                        console.log( myArray ); // [ "Red", "Green", "Blue", "Yellow" ]
                        myArray = myArray.reverse();
                        console.log( myArray ); // [ "Yellow", "Blue", "Green", "Red" ]
                    
                    
                + sort(): array is sorted based on their ASCII code
                syntax: var array1 = ["Red", 2, "Green", "15", "Blue", 101, "Yellow"];
                        var array2 = [99, 2, 38, 15, 66, 101, 200]; // it takes the first char, covert to ASCII and sort
                        console.log( array1.sort() ); // [101, "15", 2, "Blue", "Green", "Red", "Yellow"]
                        console.log( array2.sort() ); // [101, 15, 2, 200, 38, 66, 99]
                        
                 
                 + slice(): extracts part of an array and returns a new array
                 syntax: var colors = ["Red", "Green", "Blue", "Yellow", "White"];
                         var subclrs = colors.slice(1, 3); //element at 3 will not be included, (2, 4) - 4th element will be excluded
                         console.log( colors ); // [ "Red", "Green", "Blue", "Yellow", "White" ]
                         console.log( subclrs ); // [ "Green", "Blue" ]
                 
                 
                 +
                 
                 +
                        
                
          
        
    
  
  
